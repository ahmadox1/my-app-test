name: Android APK Build & Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build with Gradle (Primary Method)
        id: gradle_build
        run: |
          echo "Attempting Gradle build..."
          ./gradlew assembleDebug --stacktrace || echo "gradle_failed=true" >> $GITHUB_OUTPUT

      - name: Build with custom script (Fallback Method)
        if: steps.gradle_build.outputs.gradle_failed == 'true'
        run: |
          echo "Gradle build failed, using custom build script..."
          chmod +x ./build_apk.sh
          ./build_apk.sh

      - name: Find APK files
        id: find_apk
        run: |
          # Look for APK in standard Gradle location first
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
            echo "build_method=gradle" >> $GITHUB_OUTPUT
          # Look for APK in custom build location
          elif [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "apk_path=app/build/outputs/apk/debug/app-debug.apk" >> $GITHUB_OUTPUT
            echo "build_method=custom" >> $GITHUB_OUTPUT
          # Look for APK in project root (from previous builds)
          elif [ -f "app-debug.apk" ]; then
            echo "apk_path=app-debug.apk" >> $GITHUB_OUTPUT
            echo "build_method=existing" >> $GITHUB_OUTPUT
          else
            echo "No APK found!" && exit 1
          fi

      - name: Verify APK
        run: |
          APK_PATH="${{ steps.find_apk.outputs.apk_path }}"
          echo "APK found at: $APK_PATH"
          echo "APK size: $(stat -c%s "$APK_PATH") bytes"
          echo "APK size human: $(du -h "$APK_PATH" | cut -f1)"
          
          # Verify it's a valid APK
          file "$APK_PATH"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.run_number }}
          path: ${{ steps.find_apk.outputs.apk_path }}
          retention-days: 30

      - name: Upload build report (if exists)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-reports-${{ github.run_number }}
          path: |
            app/build/outputs/logs/*
            app/build/reports/*
            build_report.txt
          retention-days: 7

      - name: Create Release (on push to main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          name: Smart Gaming Assistant v1.0.${{ github.run_number }}
          body: |
            ðŸŽ® Smart Gaming Assistant APK
            
            **Build Info:**
            - Build Method: ${{ steps.find_apk.outputs.build_method }}
            - Build Number: ${{ github.run_number }}
            - Commit: ${{ github.sha }}
            
            **Installation:**
            1. Download the APK file
            2. Enable "Unknown Sources" in Android settings  
            3. Install the APK
            
            **Size:** $(du -h "${{ steps.find_apk.outputs.apk_path }}" | cut -f1)
          files: ${{ steps.find_apk.outputs.apk_path }}
          draft: false
          prerelease: false
